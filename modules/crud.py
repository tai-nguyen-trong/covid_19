# import pandas as pd
# import numpy as np
# from tkinter import messagebox, filedialog
# import tkinter as tk
# from modules.navigation import get_total_pages
# from modules.updateTable import update_table_display

# # Bi·∫øn to√†n c·ª•c ƒë·ªÉ qu·∫£n l√Ω d·ªØ li·ªáu
# df = None
# df_original = None
# df_current = None

# def load_csv_file(tree, page_label, pagination_frame, button_frame, search_frame, function_buttons, function_buttons2, sort_column, get_total_pages, items_per_page):
#     """H√†m ƒë·ªçc file CSV v√† c·∫≠p nh·∫≠t d·ªØ li·ªáu."""

#     # M·ªü dialog ch·ªçn file
#     file_path = filedialog.askopenfilename(
#         title="Ch·ªçn file CSV",
#         filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
#     )

#     if file_path:
#         try:
#             df = pd.read_csv(file_path)
#             if df is None or df.empty:
#                 messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ ƒë·ªçc file CSV ho·∫∑c file kh√¥ng c√≥ d·ªØ li·ªáu!")
#                 return

#             df_original = df.copy()
#             df_current = df.copy() 
#             current_page = 1  # ƒê·∫∑t l·∫°i trang hi·ªán t·∫°i v·ªÅ 1 

#             # X√≥a d·ªØ li·ªáu c≈© trong Treeview
#             for item in tree.get_children():
#                 tree.delete(item)

#             # C·∫•u h√¨nh l·∫°i c·ªôt n·∫øu c·∫ßn
#             headers = list(df.columns)
#             tree["columns"] = headers
#             tree["show"] = "headings"

#             for col in headers:
#                 tree.heading(col, text=f"‚ñ≤ {col} ‚ñº", command=lambda _col=col: sort_column(_col))
#                 tree.column(col, width=120, anchor="center", stretch=tk.YES)

#             # Th√™m d·ªØ li·ªáu m·ªõi v√†o Treeview
#             for _, row in df.iterrows():
#                 tree.insert("", "end", values=list(row))

#             messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ t·∫£i {len(df)} b·∫£n ghi t·ª´ file {file_path}")

#             # T√≠nh to√°n s·ªë trang m·ªõi
#             total_pages = get_total_pages(df_current, items_per_page)  

#             # C·∫≠p nh·∫≠t b·∫£ng hi·ªÉn th·ªã v√† tr·∫°ng th√°i trang
#             update_table_display(tree, page_label, df_current, current_page, items_per_page)
#             page_label.config(text=f"Trang {current_page}/{total_pages}")

#             # Hi·ªÉn th·ªã ph·∫ßn khung ch·ª©c nƒÉng
#             pagination_frame.pack(pady=5)
#             button_frame.pack(pady=10)
#             search_frame.grid(row=0, column=1, padx=20, sticky="e")

#             # C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t ch·ª©c nƒÉng
#             for j, btnChuyenHuong in enumerate(function_buttons2):
#                 btnChuyenHuong.grid(row=0, column=j, padx=3)  

#             for i, btn in enumerate(function_buttons):
#                 btn.grid(row=0, column=i, padx=5)  

#         except Exception as e:
#             messagebox.showerror("L·ªói", f"L·ªói khi ƒë·ªçc file CSV: {str(e)}")

# def add_data(new_data, file_path="dataset/country_wise_latest.csv"):
#     """X·ª≠ l√Ω th√™m d·ªØ li·ªáu v√†o DataFrame v√† c·∫≠p nh·∫≠t file CSV."""
#     global df, df_original, df_current, current_page  

#     try:
#         df_existing = pd.read_csv(file_path, dtype=str)
#     except FileNotFoundError:
#         df_existing = pd.DataFrame()

#     # üîÅ Chuy·ªÉn c√°c tr∆∞·ªùng r·ªóng th√†nh NaN
#     new_data = {key: (val if val.strip() != "" else np.nan) for key, val in new_data.items()}

#     # ‚ûï Th√™m d√≤ng m·ªõi v√†o d·ªØ li·ªáu hi·ªán t·∫°i
#     new_row = pd.DataFrame([new_data])
#     df = pd.concat([df_existing, new_row], ignore_index=True)  
#     df_original = df.copy()
#     df_current = df.copy()  

#     # Ghi l·∫°i file CSV
#     df.to_csv(file_path, index=False)

#     return df_current  # Tr·∫£ v·ªÅ DataFrame c·∫≠p nh·∫≠t ƒë·ªÉ hi·ªÉn th·ªã tr√™n giao di·ªán

# def update_data(selected_items, tree, page_label, current_page, items_per_page, file_path="dataset/country_wise_latest.csv"):
#     """X·ª≠ l√Ω c·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ Treeview."""
#     global df, df_original, df_current  

#     if df is None or df_original is None:
#         messagebox.showerror("L·ªói", "D·ªØ li·ªáu kh√¥ng kh·∫£ d·ª•ng ƒë·ªÉ c·∫≠p nh·∫≠t!")
#         return None, None

#     df = df_original.copy()

#     index = tree.index(selected_items[0]) + (current_page - 1) * items_per_page

#     if index >= len(df):
#         messagebox.showerror("L·ªói", "Ch·ªâ m·ª•c c·∫≠p nh·∫≠t v∆∞·ª£t qu√° k√≠ch th∆∞·ªõc d·ªØ li·ªáu!")
#         return None, None

#     current_data = df.iloc[index].to_dict()

#     def on_submit(updated_data):
#         global df, df_original, df_current, current_page  # üî• ƒê·∫£m b·∫£o bi·∫øn to√†n c·ª•c ho·∫°t ƒë·ªông ƒë√∫ng

#         try:
#             for key in updated_data:
#                 if key in df.columns:
#                     if df[key].dtype in ["int64", "float64"]:  
#                         try:
#                             updated_data[key] = float(updated_data.get(key, 0))  # ‚úÖ Tr√°nh l·ªói `NoneType`
#                         except ValueError:
#                             messagebox.showerror("L·ªói", f"Gi√° tr·ªã '{updated_data[key]}' kh√¥ng h·ª£p l·ªá cho c·ªôt {key}. Vui l√≤ng nh·∫≠p s·ªë.")
#                             return
                    
#                     # üî• ƒê·∫£m b·∫£o gi√° tr·ªã s·ªë kh√¥ng b·ªã chuy·ªÉn th√†nh NaN
#                     df.at[index, key] = updated_data[key] if isinstance(updated_data[key], (int, float)) or str(updated_data.get(key, "")).strip() != "" else np.nan  

#             df_original = df.copy()
#             df_current = df.copy()  # üî• ƒê·ªìng b·ªô d·ªØ li·ªáu ngay sau khi c·∫≠p nh·∫≠t

#             df.to_csv(file_path, index=False)

#             if df_current is not None and not df_current.empty:
#                 total_pages = get_total_pages(df_current, items_per_page)  
#                 current_page = total_pages 
#             else:
#                 current_page = 1  # N·∫øu d·ªØ li·ªáu r·ªóng, ƒë·∫∑t l·∫°i `current_page`

#             update_table_display(tree, page_label, df_current, current_page, items_per_page)  # üî• Hi·ªÉn th·ªã d·ªØ li·ªáu m·ªõi ngay l·∫≠p t·ª©c
#             page_label.config(text=f"Trang {current_page}/{total_pages}")

#             messagebox.showinfo("Th√†nh c√¥ng", "D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.")
#         except Exception as e:
#             messagebox.showerror("L·ªói", f"L·ªói c·∫≠p nh·∫≠t d·ªØ li·ªáu: {str(e)}")

#     return current_data, on_submit  # ‚úÖ Tr·∫£ v·ªÅ c·∫£ d·ªØ li·ªáu v√† h√†m x·ª≠ l√Ω

# def delete_data(selected_items, tree, page_label, current_page, items_per_page, file_path="dataset/country_wise_latest.csv"):
#     """X√≥a d·ªØ li·ªáu t·ª´ Treeview v√† c·∫≠p nh·∫≠t file CSV."""
#     global df, df_original, df_current  

#     if df is None or df.empty:
#         messagebox.showerror("L·ªói", "D·ªØ li·ªáu hi·ªán t·∫°i kh√¥ng h·ª£p l·ªá ƒë·ªÉ x√≥a!")
#         return

#     if not selected_items:
#         messagebox.showwarning("Ch∆∞a ch·ªçn", "H√£y ch·ªçn √≠t nh·∫•t m·ªôt d√≤ng ƒë·ªÉ x√≥a.")
#         return

#     if not messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a c√°c d√≤ng ƒë√£ ch·ªçn?"):
#         return

#     # L·∫•y ch·ªâ m·ª•c ch√≠nh x√°c c·ªßa d√≤ng c·∫ßn x√≥a
#     indexes_to_delete = [tree.index(item) + (current_page - 1) * items_per_page for item in selected_items]

#     # Ki·ªÉm tra ch·ªâ m·ª•c h·ª£p l·ªá
#     valid_indexes = [i for i in indexes_to_delete if i < len(df)]

#     if not valid_indexes:
#         messagebox.showerror("L·ªói", "Kh√¥ng c√≥ ch·ªâ m·ª•c h·ª£p l·ªá ƒë·ªÉ x√≥a!")
#         return

#     # X√≥a c√°c d√≤ng h·ª£p l·ªá
#     df = df.drop(df.index[valid_indexes]).reset_index(drop=True)
#     df_original = df.copy()
#     df_current = df.copy()  

#     # üî• N·∫øu t·∫•t c·∫£ d·ªØ li·ªáu b·ªã x√≥a, ƒë·∫∑t l·∫°i `df_current` th√†nh DataFrame r·ªóng
#     if df_current.empty:
#         current_page = 1
#         page_label.config(text="Trang -/-")
#     else:
#         total_pages = get_total_pages(df_current, items_per_page)
#         current_page = min(current_page, total_pages)

#     # L∆∞u l·∫°i d·ªØ li·ªáu
#     df.to_csv(file_path, index=False)

#     # C·∫≠p nh·∫≠t giao di·ªán
#     update_table_display(tree, page_label, df_current, current_page, items_per_page)

#     messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a th√†nh c√¥ng c√°c d√≤ng ƒë√£ ch·ªçn.")

import pandas as pd

def clean_data(df):
    """L√†m s·∫°ch d·ªØ li·ªáu: X√≥a h√†ng tr·ªëng ho·∫∑c sai ƒë·ªãnh d·∫°ng cho t·∫•t c·∫£ c·ªôt."""
    if df is None or df.empty:
        print("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ l√†m s·∫°ch.")
        return df

    print("Tr∆∞·ªõc khi l√†m s·∫°ch:")
    print(df.info())

    # üî• Lo·∫°i b·ªè h√†ng c√≥ b·∫•t k·ª≥ gi√° tr·ªã n√†o b·ªã tr·ªëng
    df_cleaned = df.dropna()

    # üî• L·∫•y danh s√°ch t·∫•t c·∫£ c√°c c·ªôt
    all_columns = df_cleaned.columns.tolist()
    print(f"C√°c c·ªôt trong dataset: {all_columns}")

    # üî• Chu·∫©n h√≥a d·ªØ li·ªáu d·∫°ng chu·ªói: Lo·∫°i b·ªè kho·∫£ng tr·∫Øng d∆∞ v√† k√Ω t·ª± kh√¥ng h·ª£p l·ªá
    for col in df_cleaned.select_dtypes(include=['object']).columns:
        df_cleaned[col] = df_cleaned[col].str.strip()  # X√≥a kho·∫£ng tr·∫Øng d∆∞

    # üî• Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu cho t·∫•t c·∫£ c·ªôt s·ªë
    for col in df_cleaned.select_dtypes(include=['number']).columns:
        df_cleaned[col] = pd.to_numeric(df_cleaned[col], errors='coerce')

    # üî• Lo·∫°i b·ªè h√†ng ch·ª©a gi√° tr·ªã NaN sau khi chu·∫©n h√≥a
    df_cleaned = df_cleaned.dropna()

    print("Sau khi l√†m s·∫°ch:")
    print(df_cleaned.info())

    return df_cleaned


