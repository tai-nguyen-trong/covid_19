# display/menu.py

import tkinter as tk
from tkinter import ttk
from tkinter import filedialog
import pandas as pd
import matplotlib.pyplot as plt
from tkinter import messagebox # C·∫ßn ƒë·ªÉ hi·ªÉn th·ªã c·∫£nh b√°o tr·ª±c ti·∫øp t·ª´ menu.py

from modules import app_logic # Ch·ªâ import app_logic
from display.form_dialog import show_form_window
from modules.crud import read_data

# Bi·∫øn to√†n c·ª•c cho ·ª©ng d·ª•ng (QU·∫¢N L√ù D·ªÆ LI·ªÜU T·∫†I ƒê√ÇY)
df = None # df hi·ªán t·∫°i ƒëang hi·ªÉn th·ªã tr√™n b·∫£ng ch√≠nh (c√≥ th·ªÉ l√† original ho·∫∑c ƒë√£ l·ªçc tr∆∞·ªõc ƒë√≥)
df_original = None # Lu√¥n l√† d·ªØ li·ªáu g·ªëc sau khi t·∫£i file
current_page = 1
items_per_page = 20


# ======================= GLOBAL VARIABLES =======================
current_df = pd.DataFrame()  # DataFrame hi·ªán t·∫°i
filtered_df = pd.DataFrame()  # DataFrame ƒë√£ l·ªçc
def load_csv_file():
    """H√†m ƒë·ªçc file CSV v√† hi·ªÉn th·ªã l√™n Treeview"""
    global current_df, filtered_df

########################
    global df, df_original
    
    # M·ªü dialog ch·ªçn file
    file_path = filedialog.askopenfilename(
        title="Ch·ªçn file CSV",
        filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
    )
    
    if file_path:  # N·∫øu user ch·ªçn file
        try:
            # ƒê·ªçc file CSV
            df = read_data(file_path)

            
            if df is not None:
                # current_df = df
                # filtered_df = df.copy()
                df_original = df.copy()  # L∆∞u l·∫°i d·ªØ li·ªáu g·ªëc
                current_df = df
                filtered_df = df.copy()



                # L·∫•y t√™n c·ªôt t·ª´ DataFrame
                headers = list(df.columns)
 
                # X√≥a d·ªØ li·ªáu c≈© trong Treeview
                for item in tree.get_children():
                    tree.delete(item)
                
                # th√™m d·ªØ li·ªáu header v√†o 
                tree["columns"] = headers
                tree["show"] = "headings"

                for col in headers:
                    tree.heading(col, text=col) 
                    tree.column(col, width=100)

                # Th√™m d·ªØ li·ªáu m·ªõi v√†o Treeview
                for index, row in df.iterrows():
                    tree.insert("", "end", values=list(row))

                
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ t·∫£i {len(df)} b·∫£n ghi t·ª´ file {file_path}")
                
            else:
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ ƒë·ªçc file CSV!")
                
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói khi ƒë·ªçc file: {str(e)}")

# def handle_open_file():
#     global df, df_original, current_page
#     # app_logic.open_file_action s·∫Ω tr·∫£ v·ªÅ DataFrame ƒë√£ ƒë·ªçc
#     new_df_read = app_logic.open_file_action()
#     print("Tat Ca Data trong csv:", new_df_read)
#     if new_df_read is not None:
#         df_original = new_df_read.copy() # C·∫≠p nh·∫≠t df_original c·ªßa menu.py
#         df = new_df_read.copy() # B·∫£ng ch√≠nh hi·ªÉn th·ªã d·ªØ li·ªáu g·ªëc ban ƒë·∫ßu
        
#         # C·∫•u h√¨nh c·ªôt Treeview sau khi c√≥ df
#         for row in table.get_children():
#             table.delete(row)
#         table["columns"] = list(df.columns)
#         for col_name in df.columns:
#             table.heading(col_name, text=col_name)
#             table.column(col_name, width=120, anchor="center", stretch=tk.YES)
#         table.column("#0", width=0, stretch=tk.NO) # ·∫®n c·ªôt ID m·∫∑c ƒë·ªãnh

#         current_page = 1 # V·ªÅ trang ƒë·∫ßu sau khi t·∫£i
#         app_logic.update_table_display(table, page_label, df, current_page, items_per_page)

def handle_add_data():
    def on_submit(new_data):
        global df, df_original

        # üîÅ ƒê·ªçc l·∫°i d·ªØ li·ªáu t·ª´ file ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng b·ªã m·∫•t d·ªØ li·ªáu c≈©
        df = read_data("dataset/country_wise_latest.csv")
        if df is None:
            df = pd.DataFrame()  # N·∫øu file ch∆∞a t·ªìn t·∫°i

        # ‚ûï Th√™m d√≤ng m·ªõi
        new_row = pd.DataFrame([new_data])
        df = pd.concat([df, new_row], ignore_index=True)
        df_original = df.copy()

        # Ghi l·∫°i v√†o file CSV
        df.to_csv("dataset/country_wise_latest.csv", index=False)

        # C·∫≠p nh·∫≠t b·∫£ng
        app_logic.update_table_display(tree, page_label, df, current_page, items_per_page)

    show_form_window(root, data=None, on_submit=on_submit)

def handle_update_data():
    selected = tree.selection()
    if not selected:
        messagebox.showwarning("Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn m·ªôt d√≤ng ƒë·ªÉ c·∫≠p nh·∫≠t.")
        return

    global df, df_original

    index = tree.index(selected[0]) + (current_page - 1) * items_per_page

    # Ki·ªÉm tra ch·ªâ m·ª•c h·ª£p l·ªá
    if index >= len(df):
        messagebox.showerror("L·ªói", "Ch·ªâ m·ª•c c·∫≠p nh·∫≠t v∆∞·ª£t qu√° k√≠ch th∆∞·ªõc d·ªØ li·ªáu!")
        return

    current_data = df.iloc[index].to_dict()

    def on_submit(updated_data):
        global df, df_original
        try:
            for key in updated_data:
                if key in df.columns:  # Ki·ªÉm tra n·∫øu key t·ªìn t·∫°i trong DataFrame
                    if df[key].dtype in ["int64", "float64"]:  # Ki·ªÉm tra n·∫øu c·ªôt y√™u c·∫ßu s·ªë
                        try:
                            updated_data[key] = float(updated_data[key])  # Chuy·ªÉn ƒë·ªïi th√†nh s·ªë
                        except ValueError:
                            messagebox.showerror("L·ªói", f"Gi√° tr·ªã '{updated_data[key]}' kh√¥ng h·ª£p l·ªá cho c·ªôt {key}. Vui l√≤ng nh·∫≠p s·ªë.")
                            return
                    
                    df.at[index, key] = updated_data[key]  # C·∫≠p nh·∫≠t d·ªØ li·ªáu
            df_original = df.copy()
            df.to_csv("dataset/country_wise_latest.csv", index=False)
            app_logic.update_table_display(tree, page_label, df, current_page, items_per_page)
            messagebox.showinfo("Th√†nh c√¥ng", "D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.")
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói c·∫≠p nh·∫≠t d·ªØ li·ªáu: {str(e)}")

    show_form_window(root, data=current_data, on_submit=on_submit)

def handle_delete_data():
    selected = tree.selection()
    if not selected:
        messagebox.showwarning("Ch∆∞a ch·ªçn", "H√£y ch·ªçn √≠t nh·∫•t m·ªôt d√≤ng ƒë·ªÉ x√≥a.")
        return

    if not messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a c√°c d√≤ng ƒë√£ ch·ªçn?"):
        return

    global df, df_original

    # L·∫•y ch·ªâ m·ª•c ch√≠nh x√°c c·ªßa d√≤ng c·∫ßn x√≥a
    indexes_to_delete = [tree.index(item) + (current_page - 1) * items_per_page for item in selected]

    # Ki·ªÉm tra ch·ªâ m·ª•c h·ª£p l·ªá
    valid_indexes = [i for i in indexes_to_delete if i < len(df)]

    if not valid_indexes:
        messagebox.showerror("L·ªói", "Kh√¥ng c√≥ ch·ªâ m·ª•c h·ª£p l·ªá ƒë·ªÉ x√≥a!")
        return

    # X√≥a c√°c d√≤ng h·ª£p l·ªá
    df = df.drop(df.index[valid_indexes]).reset_index(drop=True)
    df_original = df.copy()

    # L∆∞u l·∫°i d·ªØ li·ªáu
    df.to_csv("dataset/country_wise_latest.csv", index=False)

    # C·∫≠p nh·∫≠t giao di·ªán
    app_logic.update_table_display(tree, page_label, df, current_page, items_per_page)

    messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a th√†nh c√¥ng c√°c d√≤ng ƒë√£ ch·ªçn.")

def sort_column(col):
    global df, df_original
    df = df.sort_values(by=col, ascending=True if not hasattr(sort_column, "desc") or sort_column.desc else False)
    sort_column.desc = not getattr(sort_column, "desc", False)
    df_original = df.copy()
    app_logic.update_table_display(tree, page_label, df, current_page, items_per_page)


def handle_search_data(keyword):
    global df_original
    if not keyword:
        return
    keyword = keyword.lower()
    
    # C·∫£i thi·ªán hi·ªáu su·∫•t t√¨m ki·∫øm
    df_filtered = df_original[df_original.astype(str).apply(lambda x: x.str.contains(keyword, case=False, na=False)).any(axis=1)]

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ nh∆∞ng kh√¥ng ghi ƒë√® l√™n df
    app_logic.update_table_display(tree, page_label, df_filtered, 1, items_per_page)

    search_btn.config(command=lambda: handle_search_data(search_entry.get()))

def reset_search():
    global df
    df = df_original.copy()
    app_logic.update_table_display(tree, page_label, df, 1, items_per_page)

#========================= CHART FUNCTIONS =========================
def draw_chart1(df):
    plt.figure(figsize=(8, 5))
    top_confirmed = df.sort_values("Confirmed", ascending=False).head(10)
    plt.bar(top_confirmed["Country/Region"], top_confirmed["Confirmed"], color='orange')
    plt.title("Top 10 qu·ªëc gia c√≥ s·ªë ca nhi·ªÖm COVID-19 cao nh·∫•t")
    plt.ylabel("S·ªë ca nhi·ªÖm")
    plt.xticks(rotation=45)
    plt.show()

def draw_chart2(df):
    plt.figure(figsize=(8, 5))
    top_deaths = df.sort_values("Deaths", ascending=False).head(10)
    plt.bar(top_deaths["Country/Region"], top_deaths["Deaths"], color='red')
    plt.title("Top 10 qu·ªëc gia c√≥ s·ªë ca t·ª≠ vong cao nh·∫•t")
    plt.ylabel("S·ªë ca t·ª≠ vong")
    plt.xticks(rotation=45)
    plt.show()

def draw_chart3(df):
    plt.figure(figsize=(8, 5))
    region_deaths = df.groupby("WHO Region")["Deaths"].sum()
    plt.pie(region_deaths, labels=region_deaths.index, autopct='%1.1f%%', startangle=140)
    plt.title("T·ª∑ l·ªá t·ª≠ vong theo khu v·ª±c WHO")
    plt.show()

def draw_chart4(df):
    plt.figure(figsize=(8, 5))
    top_growth = df.sort_values("1 week % increase", ascending=False).head(10)
    plt.bar(top_growth["Country/Region"], top_growth["1 week % increase"], color='purple')
    plt.title("Top 10 qu·ªëc gia c√≥ t·ª∑ l·ªá tƒÉng tr∆∞·ªüng ca nhi·ªÖm trong 1 tu·∫ßn cao nh·∫•t")
    plt.ylabel("T·ª∑ l·ªá tƒÉng tr∆∞·ªüng (%)")
    plt.xticks(rotation=45)
    plt.show()

def draw_chart5(df):
    plt.figure(figsize=(8, 5))
    top_recovered_ratio = df.sort_values("Recovered / 100 Cases", ascending=False).head(10)
    plt.bar(top_recovered_ratio["Country/Region"], top_recovered_ratio["Recovered / 100 Cases"], color='green')
    plt.title("Top 10 qu·ªëc gia c√≥ t·ª∑ l·ªá h·ªìi ph·ª•c cao nh·∫•t")
    plt.ylabel("T·ª∑ l·ªá h·ªìi ph·ª•c tr√™n 100 ca (%)")
    plt.xticks(rotation=45)
    plt.show()

# H√†m m·ªü c·ª≠a s·ªï ch·ª©a c√°c n√∫t ch·ªçn bi·ªÉu ƒë·ªì
def open_chart_window():
    chart_window = tk.Toplevel(root)
    chart_window.title("Ch·ªçn bi·ªÉu ƒë·ªì")
    chart_window.geometry("300x300")
    chart_window.grab_set()

    # N·∫°p d·ªØ li·ªáu t·ª´ t·ªáp CSV
    df = pd.read_csv("dataset/country_wise_latest.csv")

    # C√°c n√∫t ƒë·ªÉ ch·ªçn bi·ªÉu ƒë·ªì
    tk.Button(chart_window, text="Ca nhi·ªÖm nhi·ªÅu nh·∫•t", command=lambda: draw_chart1(df)).pack(pady=5)
    tk.Button(chart_window, text="T·ª≠ vong cao nh·∫•t", command=lambda: draw_chart2(df)).pack(pady=5)
    tk.Button(chart_window, text="T·ª∑ l·ªá t·ª≠ vong theo WHO", command=lambda: draw_chart3(df)).pack(pady=5)
    tk.Button(chart_window, text="TƒÉng tr∆∞·ªüng ca nhi·ªÖm", command=lambda: draw_chart4(df)).pack(pady=5)
    tk.Button(chart_window, text="T·ª∑ l·ªá h·ªìi ph·ª•c", command=lambda: draw_chart5(df)).pack(pady=5)


# H√†m x·ª≠ l√Ω ƒëi·ªÅu h∆∞·ªõng trang (g·ªçi app_logic.handle_page_navigation)
def navigate_page(action_type):
    global current_page
    if df is None: return # Kh√¥ng l√†m g√¨ n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu

    # app_logic.handle_page_navigation s·∫Ω tr·∫£ v·ªÅ s·ªë trang m·ªõi
    new_page = app_logic.handle_page_navigation(df, current_page, items_per_page, action_type)
    
    if new_page != current_page: # Ch·ªâ c·∫≠p nh·∫≠t v√† hi·ªÉn th·ªã n·∫øu trang thay ƒë·ªïi
        current_page = new_page
        app_logic.update_table_display(tree, page_label, df, current_page, items_per_page)

# N√∫t l·ªçc d·ªØ li·ªáu
def handle_filter_click():
    if df_original is None:
        messagebox.showwarning("Warning", "Ch∆∞a t·∫£i d·ªØ li·ªáu ƒë·ªÉ l·ªçc!")
        return
    # Truy·ªÅn root v√† df_original v√†o h√†m l·ªçc ƒë·ªÉ app_logic c√≥ th·ªÉ d√πng
    app_logic.show_filter_window(root, df_original)

# ======================= GUI SETUP =======================
# Kh·ªüi t·∫°o c·ª≠a s·ªï ch√≠nh
root = tk.Tk()
root.title("COVID-19 Data Analysis")
root.geometry("1000x700")
# root.resizable(False, False)

# ======================= LOAD FILE BUTTON =======================
file_frame = tk.Frame(root)
file_frame.pack(fill="x", anchor="w", pady=10)

btn_load_file = tk.Button(file_frame, text="T·∫£i File CSV", command=load_csv_file,
                          bg="lightgreen", width=15, font=("Arial", 10))
btn_load_file.pack(side="left", padx=5)

# # T·∫°o menu bar
# menu_bar = tk.Menu(root)
# file_menu = tk.Menu(menu_bar, tearoff=0)

# file_menu.add_command(label="Open File", command=handle_open_file)
# file_menu.add_command(label="Exit", command=root.quit)
# menu_bar.add_cascade(label="File", menu=file_menu)
# root.config(menu=menu_bar)

# # C·∫•u h√¨nh grid cho c·ª≠a s·ªï ch√≠nh
# root.grid_columnconfigure(0, weight=1)
# root.grid_rowconfigure(1, weight=3) # H√†ng ch·ª©a b·∫£ng
# root.grid_rowconfigure(2, weight=1) # H√†ng ch·ª©a n√∫t ph√¢n trang
# root.grid_rowconfigure(3, weight=1) # H√†ng ch·ª©a n√∫t l·ªçc




# ======================= TREEVIEW + SCROLLBAR =======================
table_frame = tk.Frame(root)
table_frame.pack(fill="both", expand=True)

# Scrollbars
tree_scroll_y = tk.Scrollbar(table_frame, orient="vertical")
tree_scroll_y.pack(side="right", fill="y")

tree_scroll_x = tk.Scrollbar(table_frame, orient="horizontal")
tree_scroll_x.pack(side="bottom", fill="x")

tree = ttk.Treeview(table_frame, yscrollcommand=tree_scroll_y.set, xscrollcommand=tree_scroll_x.set)
tree.pack(fill="both", expand=True)

tree_scroll_y.config(command=tree.yview)
tree_scroll_x.config(command=tree.xview)
# # T·∫°o Frame ƒë·ªÉ ch·ª©a Treeview v√† Scrollbar
# table_frame = tk.Frame(root)
# table_frame.grid(row=1, column=0, columnspan=5, padx=10, pady=10, sticky="nsew")

# table_frame.grid_columnconfigure(0, weight=1)
# table_frame.grid_rowconfigure(0, weight=1)

# # T·∫°o Scrollbar d·ªçc
# v_scrollbar = ttk.Scrollbar(table_frame, orient="vertical")
# v_scrollbar.grid(row=0, column=1, sticky="ns")

# # T·∫°o Scrollbar ngang
# h_scrollbar = ttk.Scrollbar(table_frame, orient="horizontal")
# h_scrollbar.grid(row=1, column=0, sticky="ew")

# # T·∫°o Treeview b√™n trong table_frame v√† li√™n k·∫øt v·ªõi scrollbars
# table = ttk.Treeview(table_frame, show="headings",
#                      yscrollcommand=v_scrollbar.set,
#                      xscrollcommand=h_scrollbar.set)
# table.grid(row=0, column=0, sticky="nsew")

# v_scrollbar.config(command=table.yview)
# h_scrollbar.config(command=table.xview)


# ======================= PAGINATION BUTTONS =======================
pagination_frame = tk.Frame(root)
pagination_frame.pack(pady=5)

btn_first = tk.Button(pagination_frame, text="Trang ƒë·∫ßu", width=10, command=lambda: navigate_page("first"))
btn_prev = tk.Button(pagination_frame, text="Trang tr∆∞·ªõc", width=10, command=lambda: navigate_page("prev"))
btn_next = tk.Button(pagination_frame, text="Trang sau", width=10, command=lambda: navigate_page("next"))
btn_last = tk.Button(pagination_frame, text="Trang cu·ªëi", width=10, command=lambda: navigate_page("last"))
page_label = tk.Label(pagination_frame, text="Trang 1/2", width=12)

btn_first.grid(row=0, column=0, padx=3)
btn_prev.grid(row=0, column=1, padx=3)
btn_next.grid(row=0, column=2, padx=3)
btn_last.grid(row=0, column=3, padx=3)
page_label.grid(row=0, column=4, padx=3)

# # N√∫t ƒëi·ªÅu h∆∞·ªõng ph√¢n trang
# first_page_button = tk.Button(root, text="Trang ƒë·∫ßu", command=lambda: navigate_page("first"))
# first_page_button.grid(row=2, column=0, padx=5, pady=5)

# prev_page_button = tk.Button(root, text="Trang tr∆∞·ªõc", command=lambda: navigate_page("prev"))
# prev_page_button.grid(row=2, column=1, padx=5, pady=5)

# next_page_button = tk.Button(root, text="Trang sau", command=lambda: navigate_page("next"))
# next_page_button.grid(row=2, column=2, padx=5, pady=5)

# last_page_button = tk.Button(root, text="Trang cu·ªëi", command=lambda: navigate_page("last"))
# last_page_button.grid(row=2, column=3, padx=5, pady=5)

# page_label = tk.Label(root, text="Trang -/-")
# page_label.grid(row=2, column=4, padx=5, pady=5)



# ======================= CONTROL BUTTONS =======================
button_frame = tk.Frame(root)
button_frame.pack(pady=10)

btn_create = tk.Button(button_frame, text="Create", bg="orange", width=10, command=handle_add_data)
btn_update = tk.Button(button_frame, text="Update", bg="lightblue", width=10, command=handle_update_data)
btn_delete = tk.Button(button_frame, text="Delete", bg="red", fg="white", width=10, command=handle_delete_data)
btn_reset = tk.Button(button_frame, text="Reset", bg="gray", width=10)
btn_chart = tk.Button(button_frame, text="Charts", bg="purple", fg="white", width=10, command=open_chart_window)
btn_export = tk.Button(button_frame, text="Export", bg="green", fg="white", width=10)

btn_create.grid(row=0, column=0, padx=5)
btn_update.grid(row=0, column=1, padx=5)
btn_delete.grid(row=0, column=2, padx=5)
btn_reset.grid(row=0, column=3, padx=5)
btn_chart.grid(row=0, column=4, padx=5)
btn_export.grid(row=0, column=5, padx=5)
# filter_button = tk.Button(root, text="L·ªçc d·ªØ li·ªáu", command=handle_filter_click)
# filter_button.grid(row=3, column=0, columnspan=5, padx=10, pady=10)



# add_button = tk.Button(root, text="Th√™m d·ªØ li·ªáu", command=handle_add_data)
# add_button.grid(row=3, column=1, padx=10, pady=5, sticky="w")

# edit_button = tk.Button(root, text="S·ª≠a d√≤ng ƒë√£ ch·ªçn", command=handle_edit_data)
# edit_button.grid(row=3, column=2, padx=10, pady=5, sticky="w")


# ======================= SEARCH BAR =======================
# search_var = tk.StringVar()
# search_entry = tk.Entry(button_frame, textvariable=search_var, width=30)
# search_entry.pack(side="left", padx=5)

# btn_search = tk.Button(button_frame, text="T√¨m ki·∫øm", command=lambda: handle_search_data(search_var.get()))
# btn_search.pack(side="left", padx=5)

# btn_reset = tk.Button(button_frame, text="Reset", command=lambda: reset_search())
# btn_reset.pack(side="left", padx=5)

search_frame = tk.Frame(root)
search_frame.pack(pady=10)

tk.Label(search_frame, text="Search:").grid(row=0, column=0, padx=5)
search_entry = tk.Entry(search_frame)
search_entry.grid(row=0, column=1, padx=5)
search_btn = tk.Button(search_frame, text="Search", width=10)
search_btn.grid(row=0, column=2, padx=5)

# Li√™n k·∫øt s·ª± ki·ªán nh·∫•n n√∫t v·ªõi h√†m t√¨m ki·∫øm
search_btn.config(command=lambda: handle_search_data(search_entry.get()))

# ======================= MESSAGE EXAMPLE =======================
def show_info():
    messagebox.showinfo("Info", "No item selected!")

msg_btn = tk.Button(root, text="Test Popup", command=show_info)
msg_btn.pack(pady=5)

# --- KH·ªûI T·∫†O LOGIC ·ª®NG D·ª§NG ---
# app_logic kh√¥ng c√≤n c·∫ßn c√°c bi·∫øn to√†n c·ª•c n·ªØa.
app_logic.init_logic()

# Ch·∫°y giao di·ªán Tkinter
root.mainloop()