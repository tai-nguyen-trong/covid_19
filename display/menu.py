# display/menu.py
from modules  import search
import tkinter as tk
from tkinter import ttk
from tkinter import filedialog
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tkinter import messagebox 
from display.formInfo import show_form_window
from modules import crud
from modules import sort
from modules import updateTable
from modules import navigation
from modules.filters import show_filter_window
from modules.navigation import get_total_pages, handle_page_navigation
from modules.updateTable import update_table_display
from modules.chart import open_chart_window


# Bi·∫øn to√†n c·ª•c cho ·ª©ng d·ª•ng (QU·∫¢N L√ù D·ªÆ LI·ªÜU T·∫†I ƒê√ÇY)
df = None # df hi·ªán t·∫°i ƒëang hi·ªÉn th·ªã tr√™n b·∫£ng ch√≠nh (c√≥ th·ªÉ l√† original ho·∫∑c ƒë√£ l·ªçc tr∆∞·ªõc ƒë√≥)
df_original = None # Lu√¥n l√† d·ªØ li·ªáu g·ªëc sau khi t·∫£i file
df_current = None
current_page = 1
items_per_page = 30
ascending_order = {}  # Dictionary ƒë·ªÉ l∆∞u tr·∫°ng th√°i s·∫Øp x·∫øp t·ª´ng c·ªôt

# ======================= GLOBAL VARIABLES =======================
current_df = pd.DataFrame()  # DataFrame hi·ªán t·∫°i
filtered_df = pd.DataFrame()  # DataFrame ƒë√£ l·ªçc

def handle_load_csv():
    """H√†m ƒë·ªçc file CSV v√† hi·ªÉn th·ªã l√™n Treeview"""
    global df, df_original, df_current, current_page  

    # M·ªü dialog ch·ªçn file
    file_path = filedialog.askopenfilename(
        title="Ch·ªçn file CSV",
        filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
    )

    if file_path:
        try:
            # ƒê·ªçc file CSV v√† ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
            df = pd.read_csv(file_path)
            if df is None or df.empty:
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ ƒë·ªçc file CSV ho·∫∑c file kh√¥ng c√≥ d·ªØ li·ªáu!")
                return

            # ƒê·ªìng b·ªô d·ªØ li·ªáu g·ªëc v√† hi·ªán t·∫°i
            df_original = df.copy()
            df_current = df.copy()  
            current_page = 1  

            # X√≥a d·ªØ li·ªáu c≈© trong Treeview
            for item in tree.get_children():
                tree.delete(item)

            # # C·∫•u h√¨nh c·ªôt c·ªßa Treeview
            # headers = list(df.columns)
            # tree["columns"] = headers
            # tree["show"] = "headings"

            # for col in headers:
            #     tree.heading(col, text=col)
            #     tree.column(col, width=120, anchor="center", stretch=tk.YES)
            # tree.column("#0", width=0, stretch=tk.NO)  # ·∫®n c·ªôt ID m·∫∑c ƒë·ªãnh
            # ======================= TREEVIEW COLUMNS (ƒê·∫∑t ƒë√∫ng v·ªã tr√≠) =======================
            headers = list(df.columns)
            tree["columns"] = headers
            tree["show"] = "headings"

            for col in headers:
                tree.heading(col, text=f"‚ñ≤ {col} ‚ñº", command=lambda _col=col: handle_sort_column(_col))
                tree.column(col, width=120, anchor="center", stretch=tk.YES)

            # Th√™m d·ªØ li·ªáu m·ªõi v√†o Treeview
            for _, row in df.iterrows():
                tree.insert("", "end", values=list(row))

            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ t·∫£i {len(df)} b·∫£n ghi t·ª´ file {file_path}")

            # T√≠nh to√°n s·ªë trang m·ªõi
            total_pages = get_total_pages(df_current, items_per_page)  

            # C·∫≠p nh·∫≠t b·∫£ng hi·ªÉn th·ªã v√† tr·∫°ng th√°i trang
            update_table_display(tree, page_label, df_current, current_page, items_per_page)  
            page_label.config(text=f"Trang {current_page}/{total_pages}")  

            # Hi·ªÉn th·ªã ph·∫ßn khung ch·ª©c nƒÉng
            pagination_frame.pack(pady=5)
            button_frame.pack(pady=10)
            search_frame.grid(row=0, column=1, padx=20, sticky="e")

            # C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t ch·ª©c nƒÉng
            for j, btnChuyenHuong in enumerate(function_buttons2):
                btnChuyenHuong.grid(row=0, column=j, padx=3)  

            for i, btn in enumerate(function_buttons):
                btn.grid(row=0, column=i, padx=5)  

        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói khi ƒë·ªçc file CSV: {str(e)}")
# def handle_load_csv():
#     """G·ªçi ch·ª©c nƒÉng load CSV t·ª´ module `crud.py`"""
#     crud.load_csv_file(tree, page_label, pagination_frame, button_frame, search_frame, function_buttons, function_buttons2, handle_sort_column, get_total_pages, items_per_page)

def handle_add_data():
    def on_submit(new_data):
        global df, df_original, df_current, current_page  

        # #  ƒê·ªçc l·∫°i d·ªØ li·ªáu t·ª´ file ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng b·ªã m·∫•t d·ªØ li·ªáu c≈©
        # df = read_data("dataset/country_wise_latest.csv")
        # if df is None:
        #     df = pd.DataFrame()  # N·∫øu file ch∆∞a t·ªìn t·∫°i

        new_row = pd.DataFrame([new_data])
        df = pd.concat([df, new_row], ignore_index=True)  
        df_original = df.copy()
        df_current = df.copy()  

        # Ghi l·∫°i v√†o file CSV
        df.to_csv("dataset/country_wise_latest.csv", index=False)  

        # C·∫≠p nh·∫≠t s·ªë trang sau khi th√™m d·ªØ li·ªáu
        total_pages = get_total_pages(df_current, items_per_page)
        current_page = max(1, total_pages)  #  ƒê·∫£m b·∫£o lu√¥n c√≥ trang h·ª£p l·ªá

        # C·∫≠p nh·∫≠t b·∫£ng hi·ªÉn th·ªã
        update_table_display(tree, page_label, df_current, current_page, items_per_page)
        page_label.config(text=f"Trang {current_page}/{total_pages}")  

        messagebox.showinfo("Th√†nh c√¥ng", "D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng.")

    show_form_window(root, data=None, on_submit=on_submit)
# def handle_add_data():
#     def on_submit(new_data):
#         global df_current, current_page  

#         df_current = crud.add_data(new_data)  # G·ªçi ch·ª©c nƒÉng x·ª≠ l√Ω t·ª´ `crud.py`

#         # C·∫≠p nh·∫≠t s·ªë trang sau khi th√™m d·ªØ li·ªáu
#         total_pages = get_total_pages(df_current, items_per_page)
#         current_page = total_pages

#         # C·∫≠p nh·∫≠t b·∫£ng hi·ªÉn th·ªã
#         update_table_display(tree, page_label, df_current, current_page, items_per_page)
#         page_label.config(text=f"Trang {current_page}/{total_pages}")  

#         messagebox.showinfo("Th√†nh c√¥ng", "D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng.")

#     show_form_window(root, data=None, on_submit=on_submit)


def handle_update_data():
    selected = tree.selection()
    if not selected:
        messagebox.showwarning("Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn m·ªôt d√≤ng ƒë·ªÉ c·∫≠p nh·∫≠t.")
        return

    global df, df_original, df_current, current_page  

    if df is None or df_original is None:
        messagebox.showerror("L·ªói", "D·ªØ li·ªáu kh√¥ng kh·∫£ d·ª•ng ƒë·ªÉ c·∫≠p nh·∫≠t!")
        return
    df = df_original.copy()

    index = tree.index(selected[0]) + (current_page - 1) * items_per_page

    if index >= len(df):
        messagebox.showerror("L·ªói", "Ch·ªâ m·ª•c c·∫≠p nh·∫≠t v∆∞·ª£t qu√° k√≠ch th∆∞·ªõc d·ªØ li·ªáu!")
        return

    current_data = df.iloc[index].to_dict()

    def on_submit(updated_data):
        global df, df_original, df_current, current_page  # üî• Khai b√°o `current_page` l√† bi·∫øn to√†n c·ª•c

        try:
            for key in updated_data:
                if key in df.columns:
                    if df[key].dtype in ["int64", "float64"]:  
                        try:
                            updated_data[key] = float(updated_data[key])  # Gi·ªØ nguy√™n ki·ªÉu s·ªë
                        except ValueError:
                            messagebox.showerror("L·ªói", f"Gi√° tr·ªã '{updated_data[key]}' kh√¥ng h·ª£p l·ªá cho c·ªôt {key}. Vui l√≤ng nh·∫≠p s·ªë.")
                            return

                    # üî• ƒê·∫£m b·∫£o gi√° tr·ªã s·ªë kh√¥ng b·ªã chuy·ªÉn th√†nh NaN
                    df.at[index, key] = updated_data[key] if isinstance(updated_data[key], (int, float)) or updated_data[key].strip() != "" else np.nan  

            df_original = df.copy()
            df_current = df.copy()  

            df.to_csv("dataset/country_wise_latest.csv", index=False)

            total_pages = get_total_pages(df_current, items_per_page)  
            current_page = min(current_page, total_pages)  

            update_table_display(tree, page_label, df_current, current_page, items_per_page)
            page_label.config(text=f"Trang {current_page}/{total_pages}")

            messagebox.showinfo("Th√†nh c√¥ng", "D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.")
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói c·∫≠p nh·∫≠t d·ªØ li·ªáu: {str(e)}")

    show_form_window(root, data=current_data, on_submit=on_submit)
# def handle_update_data():
#     selected = tree.selection()
#     if not selected:
#         messagebox.showwarning("Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn m·ªôt d√≤ng ƒë·ªÉ c·∫≠p nh·∫≠t.")
#         return

#     current_data, on_submit = crud.update_data(selected, tree, page_label, current_page, items_per_page)

#     if current_data:
#         show_form_window(root, data=current_data, on_submit=on_submit)

def handle_delete_data():
    selected = tree.selection()
    if not selected:
        messagebox.showwarning("Ch∆∞a ch·ªçn", "H√£y ch·ªçn √≠t nh·∫•t m·ªôt d√≤ng ƒë·ªÉ x√≥a.")
        return

    if not messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a c√°c d√≤ng ƒë√£ ch·ªçn?"):
        return

    global df, df_original, df_current, current_page  

    # üî• Ki·ªÉm tra n·∫øu `df` l√† None ho·∫∑c r·ªóng
    if df is None or df.empty:
        messagebox.showerror("L·ªói", "D·ªØ li·ªáu hi·ªán t·∫°i kh√¥ng h·ª£p l·ªá ƒë·ªÉ x√≥a!")
        return

    # L·∫•y ch·ªâ m·ª•c ch√≠nh x√°c c·ªßa d√≤ng c·∫ßn x√≥a
    indexes_to_delete = [tree.index(item) + (current_page - 1) * items_per_page for item in selected]

    # Ki·ªÉm tra ch·ªâ m·ª•c h·ª£p l·ªá
    valid_indexes = [i for i in indexes_to_delete if i < len(df)]

    if not valid_indexes:
        messagebox.showerror("L·ªói", "Kh√¥ng c√≥ ch·ªâ m·ª•c h·ª£p l·ªá ƒë·ªÉ x√≥a!")
        return

    # X√≥a c√°c d√≤ng h·ª£p l·ªá
    df = df.drop(df.index[valid_indexes]).reset_index(drop=True)
    df_original = df.copy()
    df_current = df.copy()  

    # üî• N·∫øu t·∫•t c·∫£ d·ªØ li·ªáu b·ªã x√≥a, ƒë·∫∑t l·∫°i `df_current` th√†nh DataFrame r·ªóng
    if df_current.empty:
        current_page = 1
        page_label.config(text="Trang -/-")
    else:
        total_pages = get_total_pages(df_current, items_per_page)
        current_page = min(current_page, total_pages)

    # L∆∞u l·∫°i d·ªØ li·ªáu
    df.to_csv("dataset/country_wise_latest.csv", index=False)
    
    # C·∫≠p nh·∫≠t giao di·ªán
    update_table_display(tree, page_label, df_current, current_page, items_per_page)

    messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a th√†nh c√¥ng c√°c d√≤ng ƒë√£ ch·ªçn.")
# def handle_delete_data():
#     selected = tree.selection()
#     crud.delete_data(selected, tree, page_label, current_page, items_per_page)



def handle_setup_treeview():
    global df_current, ascending_order  

    if df_current is None or df_current.empty:
        return  

    headers = list(df_current.columns)
    tree["columns"] = headers
    tree["show"] = "headings"

    # Kh·ªüi t·∫°o tr·∫°ng th√°i s·∫Øp x·∫øp c·ªßa m·ªói c·ªôt
    for col in headers:
        ascending_order[col] = False  # ‚úÖ ƒê·∫∑t m·∫∑c ƒë·ªãnh l√† gi·∫£m d·∫ßn
        tree.heading(col, text=f"{col} ‚ñº", command=lambda _col=col: sort.sort_column(_col))
        tree.column(col, width=120, anchor="center", stretch=tk.YES)

# ======================= SEARCH FUNCTIONALITY =======================
def handle_search_data(keyword):
    """Wrapper function cho search"""
    global df_current, current_page
    df_current, current_page = search.handle_search_data(
        keyword, df_original, df_current, current_page, items_per_page, tree, page_label
    )

def handle_reset_search():
    """Wrapper function cho reset search"""
    global df, df_current, current_page
    df_current, current_page = search.handle_reset_search(
        df_original, current_page, items_per_page, tree, page_label, search_entry
    )
    # C·∫≠p nh·∫≠t df ƒë·ªÉ ƒë·ªìng b·ªô
    df = df_current.copy()
#========================= EXPORT DATA =========================
# h√†m sort

def handle_sort_column(col):
    """H√†m s·∫Øp x·∫øp c·ªôt s·ª≠ d·ª•ng module sort"""
    global df_current, current_page
    
    if df_current is None or df_current.empty:
        return
    
    # G·ªçi h√†m sort t·ª´ module v√† nh·∫≠n v·ªÅ df ƒë√£ sort v√† current_page m·ªõi
    df_current, current_page = sort.sort_column(col, tree, page_label, df_current, current_page, items_per_page)

# ti·∫øp t·ª•c h√†m export_data
def export_data():
    global df
    if df is None or df.empty:
        messagebox.showwarning("Kh√¥ng c√≥ d·ªØ li·ªáu", "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.")
        return
    # M·ªü h·ªôp tho·∫°i l∆∞u t·ªáp
    file_path = filedialog.asksaveasfilename(
        defaultextension=".csv",
        filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
    )
    if file_path:
        try:
            df.to_csv(file_path, index=False)
            messagebox.showinfo("Th√†nh c√¥ng", f"D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c xu·∫•t th√†nh c√¥ng v√†o {file_path}")
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói khi xu·∫•t d·ªØ li·ªáu: {str(e)}")
# h√†m ph√¢n trang

def handle_navigate_page(action_type):
    """S·ª≠ d·ª•ng module navigation ƒë·ªÉ x·ª≠ l√Ω ƒëi·ªÅu h∆∞·ªõng trang"""
    global current_page, df_current

    if df_current is None or df_current.empty: 
        return  # Kh√¥ng l√†m g√¨ n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu

    # G·ªçi ƒëi·ªÅu h∆∞·ªõng t·ª´ module navigation
    new_page = navigation.handle_page_navigation(df_current, current_page, items_per_page, action_type)  
    
    if new_page != current_page:  # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu trang thay ƒë·ªïi
        current_page = new_page
        updateTable.update_table_display(tree, page_label, df_current, current_page, items_per_page)
        
        total_pages_filtered = navigation.get_total_pages(df_current, items_per_page)
        page_label.config(text=f"Trang {current_page}/{total_pages_filtered}") 


# ======================= GUI SETUP =======================
# Kh·ªüi t·∫°o c·ª≠a s·ªï ch√≠nh
root = tk.Tk()
root.title("COVID-19 Data Analysis")
root.geometry("1000x700")
# M·ªü r·ªông c·ª≠a s·ªï nh∆∞ng v·∫´n gi·ªØ thanh ti√™u ƒë·ªÅ v√† n√∫t ƒëi·ªÅu khi·ªÉn
root.state("zoomed")  # S·ª≠ d·ª•ng `zoomed` thay v√¨ `fullscreen`

# root.resizable(False, False)

# ======================= LOAD FILE BUTTON =======================
file_frame = tk.Frame(root)
file_frame.pack(fill="x", anchor="w", pady=10)

btn_load_file = tk.Button(file_frame, text="T·∫£i File CSV", command=handle_load_csv,
                          bg="lightgreen", width=15, font=("Arial", 10))
# btn_load_file.pack(side="left", padx=5)
btn_load_file.grid(row=0, column=0, padx=5, sticky="w")

# ======================= SEARCH BUTTON =======================
# search_frame = tk.Frame(root)
# search_frame.pack(pady=10)
search_frame = tk.Frame(file_frame)  # ƒê·∫∑t search_frame v√†o file_frame ƒë·ªÉ n·∫±m chung h√†ng
search_frame.grid(row=0, column=1, padx=100, sticky="e")  # ƒê·∫∑t b√™n ph·∫£i n√∫t t·∫£i file


tk.Label(search_frame, text="Search:").grid(row=0, column=0, padx=5)
search_entry = tk.Entry(search_frame)
search_entry.grid(row=0, column=1, padx=5)
search_btn = tk.Button(search_frame, text="Search", width=10)
search_btn.grid(row=0, column=2, padx=5)
# Li√™n k·∫øt s·ª± ki·ªán nh·∫•n n√∫t v·ªõi h√†m t√¨m ki·∫øm
search_btn.config(command=lambda: handle_search_data(search_entry.get()))

# ======================= TREEVIEW + SCROLLBAR =======================
table_frame = tk.Frame(root)
table_frame.pack(fill="both", expand=True)

# Scrollbars
tree_scroll_y = tk.Scrollbar(table_frame, orient="vertical")
tree_scroll_y.pack(side="right", fill="y")

tree_scroll_x = tk.Scrollbar(table_frame, orient="horizontal")
tree_scroll_x.pack(side="bottom", fill="x")

tree = ttk.Treeview(table_frame, yscrollcommand=tree_scroll_y.set, xscrollcommand=tree_scroll_x.set)
tree.pack(fill="both", expand=True)

tree_scroll_y.config(command=tree.yview)
tree_scroll_x.config(command=tree.xview)

# ======================= PAGINATION BUTTONS =======================
pagination_frame = tk.Frame(root)
pagination_frame.pack(pady=5)

btn_first = tk.Button(pagination_frame, text="Trang ƒë·∫ßu", width=10, command=lambda: handle_navigate_page("first"))
btn_prev = tk.Button(pagination_frame, text="Trang tr∆∞·ªõc", width=10, command=lambda: handle_navigate_page("prev"))
btn_next = tk.Button(pagination_frame, text="Trang sau", width=10, command=lambda: handle_navigate_page("next"))
btn_last = tk.Button(pagination_frame, text="Trang cu·ªëi", width=10, command=lambda: handle_navigate_page("last"))
page_label = tk.Label(pagination_frame, text="Trang", width=12)

# btn_first.grid(row=0, column=0, padx=3)
# btn_prev.grid(row=0, column=1, padx=3)
# btn_next.grid(row=0, column=2, padx=3)
# btn_last.grid(row=0, column=3, padx=3)
# page_label.grid(row=0, column=4, padx=3)

# ======================= CONTROL BUTTONS =======================
button_frame = tk.Frame(root)
button_frame.pack(pady=10)

btn_create = tk.Button(button_frame, text="Create", bg="orange", width=10, command=handle_add_data)
btn_update = tk.Button(button_frame, text="Update", bg="lightblue", width=10, command=handle_update_data)
btn_delete = tk.Button(button_frame, text="Delete", bg="red", fg="white", width=10, command=handle_delete_data)
btn_reset = tk.Button(button_frame, text="Reset", bg="gray", fg="white", width=10, command=handle_reset_search)
btn_chart = tk.Button(button_frame, text="Charts", bg="purple", fg="white", width=10, command= lambda :open_chart_window(root, df))
btn_export = tk.Button(button_frame, text="Export", bg="green", fg="white", width=10, command=export_data)

# btn_create.grid(row=0, column=0, padx=5)
# btn_update.grid(row=0, column=1, padx=5)
# btn_delete.grid(row=0, column=2, padx=5)
# btn_reset.grid(row=0, column=3, padx=5)
# btn_chart.grid(row=0, column=4, padx=5)
# btn_export.grid(row=0, column=5, padx=5)

# # ======================= SEARCH BUTTON =======================
# search_frame = tk.Frame(root)
# search_frame.pack(pady=10)

# tk.Label(search_frame, text="Search:").grid(row=0, column=0, padx=5)
# search_entry = tk.Entry(search_frame)
# search_entry.grid(row=0, column=1, padx=5)
# search_btn = tk.Button(search_frame, text="Search", width=10)
# search_btn.grid(row=0, column=2, padx=5)
# # Li√™n k·∫øt s·ª± ki·ªán nh·∫•n n√∫t v·ªõi h√†m t√¨m ki·∫øm
# search_btn.config(command=lambda: handle_search_data(search_entry.get()))


# ·∫®n t·∫•t c·∫£ c√°c n√∫t khi ch∆∞∆°ng tr√¨nh kh·ªüi ƒë·ªông
function_buttons = [btn_create, btn_update, btn_delete, btn_reset, btn_chart, btn_export]
function_buttons2 = [btn_first, btn_prev, btn_next, btn_last, page_label]
for btn in function_buttons:
    btn.grid_remove()

for btnChuyenHuong in function_buttons2:
    btnChuyenHuong.grid_remove()

pagination_frame.pack_forget()
button_frame.pack_forget()
# search_frame.pack_forget()
search_frame.grid_remove()  # ·∫®n search_frame




root.mainloop()