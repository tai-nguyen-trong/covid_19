# display/menu.py=
import tkinter as tk
from tkinter import ttk
from tkinter import filedialog
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tkinter import messagebox 
from display.formInfo import show_form_window
from modules import crud
from modules.crud import get_total_pages, read_data
from modules.filters import show_filter_window
from modules.navigation import handle_page_navigation

# Bi·∫øn to√†n c·ª•c cho ·ª©ng d·ª•ng (QU·∫¢N L√ù D·ªÆ LI·ªÜU T·∫†I ƒê√ÇY)
df = None # df hi·ªán t·∫°i ƒëang hi·ªÉn th·ªã tr√™n b·∫£ng ch√≠nh (c√≥ th·ªÉ l√† original ho·∫∑c ƒë√£ l·ªçc tr∆∞·ªõc ƒë√≥)
df_original = None # Lu√¥n l√† d·ªØ li·ªáu g·ªëc sau khi t·∫£i file
df_current = None
current_page = 1
items_per_page = 30
ascending_order = {}  # Dictionary ƒë·ªÉ l∆∞u tr·∫°ng th√°i s·∫Øp x·∫øp t·ª´ng c·ªôt



# ======================= GLOBAL VARIABLES =======================
current_df = pd.DataFrame()  # DataFrame hi·ªán t·∫°i
filtered_df = pd.DataFrame()  # DataFrame ƒë√£ l·ªçc

def load_csv_file():
    """H√†m ƒë·ªçc file CSV v√† hi·ªÉn th·ªã l√™n Treeview"""
    # global current_df, filtered_df, df, df_original, current_page
    global df_original, df_current, current_page

    # M·ªü dialog ch·ªçn file
    file_path = filedialog.askopenfilename(
        title="Ch·ªçn file CSV",
        filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
    )

    if file_path:
        try:
            df = read_data(file_path)

            if df is None or df.empty:
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ ƒë·ªçc file CSV ho·∫∑c file kh√¥ng c√≥ d·ªØ li·ªáu!")
                return

            # # L∆∞u d·ªØ li·ªáu g·ªëc
            # df_original = df.copy()
            # current_df = df
            # filtered_df = df.copy()
            df_original = pd.read_csv(file_path)  # ƒê·ªçc file CSV
            df_current = df_original.copy()  # C·∫≠p nh·∫≠t d·ªØ li·ªáu hi·ªán t·∫°i ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng ƒë√∫ng
            current_page = 1  # Reset v·ªÅ trang ƒë·∫ßu ti√™n


            # X√≥a d·ªØ li·ªáu c≈© trong Treeview
            for item in tree.get_children():
                tree.delete(item)

            # # C·∫•u h√¨nh c·ªôt c·ªßa Treeview
            # headers = list(df.columns)
            # tree["columns"] = headers
            # tree["show"] = "headings"

            # for col in headers:
            #     tree.heading(col, text=col)
            #     tree.column(col, width=120, anchor="center", stretch=tk.YES)
            # tree.column("#0", width=0, stretch=tk.NO)  # ·∫®n c·ªôt ID m·∫∑c ƒë·ªãnh
             # ======================= TREEVIEW COLUMNS (ƒê·∫∑t ƒë√∫ng v·ªã tr√≠) =======================
            headers = list(df.columns)
            tree["columns"] = headers
            tree["show"] = "headings"


            for col in headers:
                tree.heading(col, text=f"‚ñ≤ {col} ‚ñº", command=lambda _col=col: sort_column(_col))
                tree.column(col, width=120, anchor="center", stretch=tk.YES)



            

            # Th√™m d·ªØ li·ªáu m·ªõi v√†o Treeview
            for _, row in df.iterrows():
                tree.insert("", "end", values=list(row))

            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ t·∫£i {len(df)} b·∫£n ghi t·ª´ file {file_path}")

            # current_page = 1
            # crud.update_table_display(tree, page_label, df, current_page, items_per_page)
            total_pages = get_total_pages(df_current, items_per_page)  # T√≠nh s·ªë trang

            crud.update_table_display(tree, page_label, df_current, current_page, items_per_page)  
            page_label.config(text=f"Trang {current_page}/{total_pages}")  # Hi·ªÉn th·ªã s·ªë trang ƒë√∫ng
        

            # Hi·ªÉn th·ªã ph·∫ßn khung ch·ª©c nƒÉng v√† n√∫t ch·ª©c nƒÉng
            pagination_frame.pack(pady=5)
            button_frame.pack(pady=10)
            # search_frame.pack(pady=10)
            search_frame.grid(row=0, column=1, padx=20, sticky="e")

            for j, btnChuyenHuong in enumerate(function_buttons2):
                btnChuyenHuong.grid(row=0, column=j, padx=3) 

            for i, btn in enumerate(function_buttons):
                btn.grid(row=0, column=i, padx=5) 

        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói khi ƒë·ªçc file CSV: {str(e)}")

def handle_add_data():
    def on_submit(new_data):
        # global df, df_original
        global df, df_original, df_current, current_page 

        # üîÅ ƒê·ªçc l·∫°i d·ªØ li·ªáu t·ª´ file ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng b·ªã m·∫•t d·ªØ li·ªáu c≈©
        try:
            df_existing = pd.read_csv("dataset/country_wise_latest.csv")  
        except FileNotFoundError:
            df_existing = pd.DataFrame()  # N·∫øu file ch∆∞a t·ªìn t·∫°i, t·∫°o DataFrame r·ªóng

        # üîÅ Chuy·ªÉn c√°c tr∆∞·ªùng r·ªóng th√†nh NaN ngay l√∫c th√™m d·ªØ li·ªáu
        new_data = {key: (val if val.strip() != "" else np.nan) for key, val in new_data.items()}



        # ‚ûï Th√™m d√≤ng m·ªõi v√†o d·ªØ li·ªáu hi·ªán t·∫°i
        new_row = pd.DataFrame([new_data])
        df = pd.concat([df_existing, new_row], ignore_index=True)  # Gi·ªØ l·∫°i d·ªØ li·ªáu c≈© v√† th√™m m·ªõi
        df_original = df.copy()
        df_current = df.copy() 

        # Ghi l·∫°i v√†o file CSV
        df.to_csv("dataset/country_wise_latest.csv", index=False)

        # C·∫≠p nh·∫≠t s·ªë trang sau khi th√™m d·ªØ li·ªáu
        total_pages = get_total_pages(df_current, items_per_page)
        # current_page = 1  # ƒê·∫∑t v·ªÅ trang ƒë·∫ßu ti√™n sau khi th√™m d·ªØ li·ªáu
        current_page = total_pages  # ƒê·∫∑t v·ªÅ trang cu·ªëi sau khi th√™m d·ªØ li·ªáu



        # C·∫≠p nh·∫≠t b·∫£ng
        crud.update_table_display(tree, page_label, df_current, current_page, items_per_page)
        page_label.config(text=f"Trang {current_page}/{total_pages}")  # Hi·ªÉn th·ªã s·ªë trang ƒë√∫ng

        # crud.update_table_display(tree, page_label, df, current_page, items_per_page)
        messagebox.showinfo("Th√†nh c√¥ng", "D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng.")

    show_form_window(root, data=None, on_submit=on_submit)

def handle_update_data():
    selected = tree.selection()
    if not selected:
        messagebox.showwarning("Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn m·ªôt d√≤ng ƒë·ªÉ c·∫≠p nh·∫≠t.")
        return

    global df, df_original

    index = tree.index(selected[0]) + (current_page - 1) * items_per_page

    # Ki·ªÉm tra ch·ªâ m·ª•c h·ª£p l·ªá
    if index >= len(df):
        messagebox.showerror("L·ªói", "Ch·ªâ m·ª•c c·∫≠p nh·∫≠t v∆∞·ª£t qu√° k√≠ch th∆∞·ªõc d·ªØ li·ªáu!")
        return

    current_data = df.iloc[index].to_dict()

    def on_submit(updated_data):
        global df, df_original
        try:
            for key in updated_data:
                if key in df.columns:  # Ki·ªÉm tra n·∫øu key t·ªìn t·∫°i trong DataFrame
                    if df[key].dtype in ["int64", "float64"]:  # Ki·ªÉm tra n·∫øu c·ªôt y√™u c·∫ßu s·ªë
                        try:
                            updated_data[key] = float(updated_data[key])  # Chuy·ªÉn ƒë·ªïi th√†nh s·ªë
                        except ValueError:
                            messagebox.showerror("L·ªói", f"Gi√° tr·ªã '{updated_data[key]}' kh√¥ng h·ª£p l·ªá cho c·ªôt {key}. Vui l√≤ng nh·∫≠p s·ªë.")
                            return
                    
                    df.at[index, key] = updated_data[key]  # C·∫≠p nh·∫≠t d·ªØ li·ªáu
            df_original = df.copy()
            df.to_csv("dataset/country_wise_latest.csv", index=False)
            crud.update_table_display(tree, page_label, df, current_page, items_per_page)
            messagebox.showinfo("Th√†nh c√¥ng", "D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.")
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói c·∫≠p nh·∫≠t d·ªØ li·ªáu: {str(e)}")

    show_form_window(root, data=current_data, on_submit=on_submit)

def handle_delete_data():
    selected = tree.selection()
    if not selected:
        messagebox.showwarning("Ch∆∞a ch·ªçn", "H√£y ch·ªçn √≠t nh·∫•t m·ªôt d√≤ng ƒë·ªÉ x√≥a.")
        return

    if not messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a c√°c d√≤ng ƒë√£ ch·ªçn?"):
        return

    global df, df_original

    # L·∫•y ch·ªâ m·ª•c ch√≠nh x√°c c·ªßa d√≤ng c·∫ßn x√≥a
    indexes_to_delete = [tree.index(item) + (current_page - 1) * items_per_page for item in selected]

    # Ki·ªÉm tra ch·ªâ m·ª•c h·ª£p l·ªá
    valid_indexes = [i for i in indexes_to_delete if i < len(df)]

    if not valid_indexes:
        messagebox.showerror("L·ªói", "Kh√¥ng c√≥ ch·ªâ m·ª•c h·ª£p l·ªá ƒë·ªÉ x√≥a!")
        return

    # X√≥a c√°c d√≤ng h·ª£p l·ªá
    df = df.drop(df.index[valid_indexes]).reset_index(drop=True)
    df_original = df.copy()

    # L∆∞u l·∫°i d·ªØ li·ªáu
    df.to_csv("dataset/country_wise_latest.csv", index=False)

    # C·∫≠p nh·∫≠t giao di·ªán
    crud.update_table_display(tree, page_label, df, current_page, items_per_page)

    messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a th√†nh c√¥ng c√°c d√≤ng ƒë√£ ch·ªçn.")

def sort_column(col):
    """H√†m s·∫Øp x·∫øp c·ªôt tƒÉng ho·∫∑c gi·∫£m d·∫ßn khi nh·∫•p v√†o ti√™u ƒë·ªÅ"""
    global df_current, ascending_order  

    if df_current is None or df_current.empty:
        return  

    # Ki·ªÉm tra tr·∫°ng th√°i s·∫Øp x·∫øp ban ƒë·∫ßu
    if col not in ascending_order:
        ascending_order[col] = True  

    # ƒê·∫£o tr·∫°ng th√°i s·∫Øp x·∫øp m·ªói l·∫ßn nh·∫•n
    ascending_order[col] = not ascending_order[col]

    # S·∫Øp x·∫øp d·ªØ li·ªáu hi·ªán t·∫°i thay v√¨ d·ªØ li·ªáu g·ªëc
    df_current = df_current.sort_values(by=col, ascending=ascending_order[col])

    # C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ **ch·ªâ tr√™n c·ªôt ƒë∆∞·ª£c nh·∫•n**
    up_icon = "‚ñ≤" if ascending_order[col] else "‚ñ≤"
    down_icon = "‚ñº" if not ascending_order[col] else "‚ñº"
    tree.heading(col, text=f"{up_icon} {col} {down_icon}", command=lambda _col=col: sort_column(_col))

    # C·∫≠p nh·∫≠t l·∫°i b·∫£ng hi·ªÉn th·ªã theo d·ªØ li·ªáu ƒë√£ l·ªçc
    crud.update_table_display(tree, page_label, df_current, current_page, items_per_page)
def setup_treeview():
    headers = list(df.columns)
    tree["columns"] = headers
    tree["show"] = "headings"

    # Kh·ªüi t·∫°o tr·∫°ng th√°i s·∫Øp x·∫øp c·ªßa m·ªói c·ªôt (None khi ch∆∞a c√≥ s·∫Øp x·∫øp)
    for col in headers:
        ascending_order[col] = None  
        tree.heading(col, text=f"‚ñ≤ {col} ‚ñº", command=lambda _col=col: sort_column(_col))
        tree.column(col, width=120, anchor="center", stretch=tk.YES)



def handle_search_data(keyword):
    global df_original, df_current, current_page  # Th√™m bi·∫øn l∆∞u tr·∫°ng th√°i d·ªØ li·ªáu hi·ªán t·∫°i

    if not keyword:
        return
    keyword = keyword.lower()

    # L·ªçc d·ªØ li·ªáu
    df_filtered = df_original[df_original.astype(str).apply(lambda x: x.str.contains(keyword, case=False, na=False)).any(axis=1)]

    if df_filtered.empty:
        messagebox.showinfo("Th√¥ng b√°o", "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p!")
        return

    df_current = df_filtered  # C·∫≠p nh·∫≠t d·ªØ li·ªáu hi·ªán t·∫°i ƒë·ªÉ ph√¢n trang ƒë√∫ng
    current_page = 1  # ƒê·∫∑t trang ƒë·∫ßu ti√™n khi t√¨m ki·∫øm m·ªõi
    total_pages_filtered = get_total_pages(df_current, items_per_page)



    # Hi·ªÉn th·ªã k·∫øt qu·∫£ v·ªõi s·ªë trang m·ªõi
    crud.update_table_display(tree, page_label, df_current, current_page, items_per_page)

    page_label.config(text=f"Trang {current_page}/{total_pages_filtered}")
# def handle_search_data(keyword):
#     global df_original
#     if not keyword:
#         return
#     keyword = keyword.lower()
    
#     # C·∫£i thi·ªán hi·ªáu su·∫•t t√¨m ki·∫øm
#     df_filtered = df_original[df_original.astype(str).apply(lambda x: x.str.contains(keyword, case=False, na=False)).any(axis=1)]

#     # Hi·ªÉn th·ªã k·∫øt qu·∫£ nh∆∞ng kh√¥ng ghi ƒë√® l√™n df
#     crud.update_table_display(tree, page_label, df_filtered, 1, items_per_page, keyword)

#     search_btn.config(command=lambda: handle_search_data(search_entry.get()))

# def reset_search():
#     global df
#     df = df_original.copy()
#     search_entry.delete(0, tk.END)  # X√≥a n·ªôi dung trong √¥ nh·∫≠p t√¨m ki·∫øm
#     crud.update_table_display(tree, page_label, df, 1, items_per_page)
def reset_search():
    global df, df_current, current_page  # ƒê·∫£m b·∫£o c·∫≠p nh·∫≠t bi·∫øn ƒë√∫ng

    df = df_original.copy()
    df_current = df_original.copy()  # C·∫≠p nh·∫≠t d·ªØ li·ªáu hi·ªán t·∫°i ƒë·ªÉ ph√¢n trang ch√≠nh x√°c
    current_page = 1  # Reset v·ªÅ trang ƒë·∫ßu ti√™n

    search_entry.delete(0, tk.END)  # X√≥a n·ªôi dung trong √¥ nh·∫≠p t√¨m ki·∫øm
    total_pages = get_total_pages(df_current, items_per_page)  # T√≠nh s·ªë trang theo dataset g·ªëc

    crud.update_table_display(tree, page_label, df_current, current_page, items_per_page)
    page_label.config(text=f"Trang {current_page}/{total_pages}")  # Hi·ªÉn th·ªã s·ªë trang ƒë√∫ng

#========================= CHART FUNCTIONS =========================
def draw_chart1(df):
    plt.figure(figsize=(8, 5))
    top_confirmed = df.sort_values("Confirmed", ascending=False).head(10)
    plt.bar(top_confirmed["Country/Region"], top_confirmed["Confirmed"], color='orange')
    plt.title("Top 10 qu·ªëc gia c√≥ s·ªë ca nhi·ªÖm COVID-19 cao nh·∫•t")
    plt.ylabel("S·ªë ca nhi·ªÖm")
    plt.xticks(rotation=45)
    plt.show()

def draw_chart2(df):
    plt.figure(figsize=(8, 5))
    top_deaths = df.sort_values("Deaths", ascending=False).head(10)
    plt.bar(top_deaths["Country/Region"], top_deaths["Deaths"], color='red')
    plt.title("Top 10 qu·ªëc gia c√≥ s·ªë ca t·ª≠ vong cao nh·∫•t")
    plt.ylabel("S·ªë ca t·ª≠ vong")
    plt.xticks(rotation=45)
    plt.show()

def draw_chart3(df):
    plt.figure(figsize=(8, 5))
    region_deaths = df.groupby("WHO Region")["Deaths"].sum()
    plt.pie(region_deaths, labels=region_deaths.index, autopct='%1.1f%%', startangle=140)
    plt.title("T·ª∑ l·ªá t·ª≠ vong theo khu v·ª±c WHO")
    plt.show()

def draw_chart4(df):
    plt.figure(figsize=(8, 5))
    top_growth = df.sort_values("1 week % increase", ascending=False).head(10)
    plt.bar(top_growth["Country/Region"], top_growth["1 week % increase"], color='purple')
    plt.title("Top 10 qu·ªëc gia c√≥ t·ª∑ l·ªá tƒÉng tr∆∞·ªüng ca nhi·ªÖm trong 1 tu·∫ßn cao nh·∫•t")
    plt.ylabel("T·ª∑ l·ªá tƒÉng tr∆∞·ªüng (%)")
    plt.xticks(rotation=45)
    plt.show()

def draw_chart5(df):
    plt.figure(figsize=(8, 5))
    top_recovered_ratio = df.sort_values("Recovered / 100 Cases", ascending=False).head(10)
    plt.bar(top_recovered_ratio["Country/Region"], top_recovered_ratio["Recovered / 100 Cases"], color='green')
    plt.title("Top 10 qu·ªëc gia c√≥ t·ª∑ l·ªá h·ªìi ph·ª•c cao nh·∫•t")
    plt.ylabel("T·ª∑ l·ªá h·ªìi ph·ª•c tr√™n 100 ca (%)")
    plt.xticks(rotation=45)
    plt.show()

# H√†m m·ªü c·ª≠a s·ªï ch·ª©a c√°c n√∫t ch·ªçn bi·ªÉu ƒë·ªì
def open_chart_window():
    chart_window = tk.Toplevel(root)
    chart_window.title("Ch·ªçn bi·ªÉu ƒë·ªì")
    chart_window.geometry("300x300")
    chart_window.grab_set()

    # N·∫°p d·ªØ li·ªáu t·ª´ t·ªáp CSV
    df = pd.read_csv("dataset/country_wise_latest.csv")

    # C√°c n√∫t ƒë·ªÉ ch·ªçn bi·ªÉu ƒë·ªì
    tk.Button(chart_window, text="Ca nhi·ªÖm nhi·ªÅu nh·∫•t", command=lambda: draw_chart1(df)).pack(pady=5)
    tk.Button(chart_window, text="T·ª≠ vong cao nh·∫•t", command=lambda: draw_chart2(df)).pack(pady=5)
    tk.Button(chart_window, text="T·ª∑ l·ªá t·ª≠ vong theo WHO", command=lambda: draw_chart3(df)).pack(pady=5)
    tk.Button(chart_window, text="TƒÉng tr∆∞·ªüng ca nhi·ªÖm", command=lambda: draw_chart4(df)).pack(pady=5)
    tk.Button(chart_window, text="T·ª∑ l·ªá h·ªìi ph·ª•c", command=lambda: draw_chart5(df)).pack(pady=5)


# # H√†m x·ª≠ l√Ω ƒëi·ªÅu h∆∞·ªõng trang
# def navigate_page(action_type):
#     global current_page
#     if df is None: return # Kh√¥ng l√†m g√¨ n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu

#     # app_logic.handle_page_navigation s·∫Ω tr·∫£ v·ªÅ s·ªë trang m·ªõi
#     new_page = handle_page_navigation(df, current_page, items_per_page, action_type)
    
#     if new_page != current_page: # Ch·ªâ c·∫≠p nh·∫≠t v√† hi·ªÉn th·ªã n·∫øu trang thay ƒë·ªïi
#         current_page = new_page
#         crud.update_table_display(tree, page_label, df, current_page, items_per_page)
def navigate_page(action_type):
    global current_page, df_current  # ƒê·∫£m b·∫£o ƒëang d√πng d·ªØ li·ªáu hi·ªán t·∫°i, kh√¥ng quay v·ªÅ df g·ªëc

    if df_current is None or df_current.empty: 
        return  # Kh√¥ng l√†m g√¨ n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu

    # G·ªçi ƒëi·ªÅu h∆∞·ªõng tr√™n d·ªØ li·ªáu hi·ªán t·∫°i
    new_page = handle_page_navigation(df_current, current_page, items_per_page, action_type)  
    
    if new_page != current_page:  # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu trang thay ƒë·ªïi
        current_page = new_page
        crud.update_table_display(tree, page_label, df_current, current_page, items_per_page)
        
        
        total_pages_filtered = get_total_pages(df_current, items_per_page)
        page_label.config(text=f"Trang {current_page}/{total_pages_filtered}")  

# N√∫t l·ªçc d·ªØ li·ªáu
def handle_filter_click():
    if df_original is None:
        messagebox.showwarning("Warning", "Ch∆∞a t·∫£i d·ªØ li·ªáu ƒë·ªÉ l·ªçc!")
        return
    # Truy·ªÅn root v√† df_original v√†o h√†m l·ªçc ƒë·ªÉ app_logic c√≥ th·ªÉ d√πng
    show_filter_window(root, df_original)

# ======================= GUI SETUP =======================
# Kh·ªüi t·∫°o c·ª≠a s·ªï ch√≠nh
root = tk.Tk()
root.title("COVID-19 Data Analysis")
root.geometry("1000x700")
# M·ªü r·ªông c·ª≠a s·ªï nh∆∞ng v·∫´n gi·ªØ thanh ti√™u ƒë·ªÅ v√† n√∫t ƒëi·ªÅu khi·ªÉn
root.state("zoomed")  # S·ª≠ d·ª•ng `zoomed` thay v√¨ `fullscreen`

# root.resizable(False, False)

# ======================= LOAD FILE BUTTON =======================
file_frame = tk.Frame(root)
file_frame.pack(fill="x", anchor="w", pady=10)

btn_load_file = tk.Button(file_frame, text="T·∫£i File CSV", command=load_csv_file,
                          bg="lightgreen", width=15, font=("Arial", 10))
# btn_load_file.pack(side="left", padx=5)
btn_load_file.grid(row=0, column=0, padx=5, sticky="w")

# ======================= SEARCH BUTTON =======================
# search_frame = tk.Frame(root)
# search_frame.pack(pady=10)
search_frame = tk.Frame(file_frame)  # ƒê·∫∑t search_frame v√†o file_frame ƒë·ªÉ n·∫±m chung h√†ng
search_frame.grid(row=0, column=1, padx=100, sticky="e")  # ƒê·∫∑t b√™n ph·∫£i n√∫t t·∫£i file


tk.Label(search_frame, text="Search:").grid(row=0, column=0, padx=5)
search_entry = tk.Entry(search_frame)
search_entry.grid(row=0, column=1, padx=5)
search_btn = tk.Button(search_frame, text="Search", width=10)
search_btn.grid(row=0, column=2, padx=5)
# Li√™n k·∫øt s·ª± ki·ªán nh·∫•n n√∫t v·ªõi h√†m t√¨m ki·∫øm
search_btn.config(command=lambda: handle_search_data(search_entry.get()))

# ======================= TREEVIEW + SCROLLBAR =======================
table_frame = tk.Frame(root)
table_frame.pack(fill="both", expand=True)

# Scrollbars
tree_scroll_y = tk.Scrollbar(table_frame, orient="vertical")
tree_scroll_y.pack(side="right", fill="y")

tree_scroll_x = tk.Scrollbar(table_frame, orient="horizontal")
tree_scroll_x.pack(side="bottom", fill="x")

tree = ttk.Treeview(table_frame, yscrollcommand=tree_scroll_y.set, xscrollcommand=tree_scroll_x.set)
tree.pack(fill="both", expand=True)

tree_scroll_y.config(command=tree.yview)
tree_scroll_x.config(command=tree.xview)

# ======================= PAGINATION BUTTONS =======================
pagination_frame = tk.Frame(root)
pagination_frame.pack(pady=5)

btn_first = tk.Button(pagination_frame, text="Trang ƒë·∫ßu", width=10, command=lambda: navigate_page("first"))
btn_prev = tk.Button(pagination_frame, text="Trang tr∆∞·ªõc", width=10, command=lambda: navigate_page("prev"))
btn_next = tk.Button(pagination_frame, text="Trang sau", width=10, command=lambda: navigate_page("next"))
btn_last = tk.Button(pagination_frame, text="Trang cu·ªëi", width=10, command=lambda: navigate_page("last"))
page_label = tk.Label(pagination_frame, text="Trang", width=12)

# btn_first.grid(row=0, column=0, padx=3)
# btn_prev.grid(row=0, column=1, padx=3)
# btn_next.grid(row=0, column=2, padx=3)
# btn_last.grid(row=0, column=3, padx=3)
# page_label.grid(row=0, column=4, padx=3)

# ======================= CONTROL BUTTONS =======================
button_frame = tk.Frame(root)
button_frame.pack(pady=10)

btn_create = tk.Button(button_frame, text="Create", bg="orange", width=10, command=handle_add_data)
btn_update = tk.Button(button_frame, text="Update", bg="lightblue", width=10, command=handle_update_data)
btn_delete = tk.Button(button_frame, text="Delete", bg="red", fg="white", width=10, command=handle_delete_data)
btn_reset = tk.Button(button_frame, text="Reset", bg="lightgray", width=10, command=reset_search)
btn_chart = tk.Button(button_frame, text="Charts", bg="purple", fg="white", width=10, command=open_chart_window)
btn_export = tk.Button(button_frame, text="Export", bg="green", fg="white", width=10)

# btn_create.grid(row=0, column=0, padx=5)
# btn_update.grid(row=0, column=1, padx=5)
# btn_delete.grid(row=0, column=2, padx=5)
# btn_reset.grid(row=0, column=3, padx=5)
# btn_chart.grid(row=0, column=4, padx=5)
# btn_export.grid(row=0, column=5, padx=5)

# # ======================= SEARCH BUTTON =======================
# search_frame = tk.Frame(root)
# search_frame.pack(pady=10)

# tk.Label(search_frame, text="Search:").grid(row=0, column=0, padx=5)
# search_entry = tk.Entry(search_frame)
# search_entry.grid(row=0, column=1, padx=5)
# search_btn = tk.Button(search_frame, text="Search", width=10)
# search_btn.grid(row=0, column=2, padx=5)
# # Li√™n k·∫øt s·ª± ki·ªán nh·∫•n n√∫t v·ªõi h√†m t√¨m ki·∫øm
# search_btn.config(command=lambda: handle_search_data(search_entry.get()))


# ·∫®n t·∫•t c·∫£ c√°c n√∫t khi ch∆∞∆°ng tr√¨nh kh·ªüi ƒë·ªông
function_buttons = [btn_create, btn_update, btn_delete, btn_reset, btn_chart, btn_export]
function_buttons2 = [btn_first, btn_prev, btn_next, btn_last, page_label]
for btn in function_buttons:
    btn.grid_remove()

for btnChuyenHuong in function_buttons2:
    btnChuyenHuong.grid_remove()

pagination_frame.pack_forget()
button_frame.pack_forget()
# search_frame.pack_forget()
search_frame.grid_remove()  # ·∫®n search_frame




root.mainloop()